{"version":3,"sources":["Components/rssFeed.js","Components/feedbuilder.js","App.js","reportWebVitals.js","index.js"],"names":["headers","RSSFeed","props","fetchTradeFeed","a","fetch","url","then","res","json","result","setState","isLoaded","tradefeed","error","state","this","id","className","message","feed","split","length","title","map","header","items","item","description","element","replace","Component","Feeds","data","feeds","App","config","$","ajax","dataType","cache","success","bind","xhr","status","err","console","log","alert","getConfig","rssfeeds","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e50ea0c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './rssFeed.css'\r\n\r\nconst headers = ['ID','ID','Type','Product','Action','Type','IDontKnow','IDontKnow','Empty','DCF','StartDate','Empty','ExectionDateUTC','Empty','Empty','ExectionDateGMT','EndDate','Empty','Rate','Empty','Empty','Empty','Tenor','Empty','Empty','Empty','Empty','Empty','PayIndex','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','PayCurrency','RecCurrency','Empty','Empty','Empty','Empty','Empty','Empty','Empty','Empty','PayFreq','RecFreq','IDontKnow','IDontKnow','Empty','Empty','Empty','Empty','Empty','Empty','Empty','PaySetttleCurr','RecSettleCurr','Empty','Empty','Empty','Empty','Empty','Empty','RecIndex','Empty','Empty','Empty','Empty','Empty','Empty','SEF']\r\nconst parseUrl = 'https://api.rss2json.com/v1/api.json?rss_url=';\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/cftc/rss/CFTC_RSS_RATES.rss';\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/ca/rss/CA_RSS_RATES.rss';\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/cftc/rss/CFTC_RSS_RATES.rss';\r\n\r\n \r\nclass RSSFeed extends Component {\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         error: null,\r\n         isLoaded: false,\r\n         tradefeed: {}\r\n       };\r\n    }\r\n\r\n    fetchTradeFeed = async() => { \r\n      fetch(parseUrl + this.props.url)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            tradefeed: result\r\n          });\r\n        },\r\n        // error handler\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n   }\r\n\r\n   componentDidMount() \r\n   {\r\n      this.fetchTradeFeed();\r\n   }\r\n\r\n\r\n  render() {\r\n\r\n    const { error, isLoaded, tradefeed } = this.state;\r\n\r\n    if (error) {\r\n      return (\r\n        <section id=\"rssfeed\">\r\n          <div className=\"tradeFeed\">\r\n            Error: {error.message}\r\n          </div>\r\n        </section>\r\n      );\r\n    } \r\n    else if (!isLoaded) {\r\n      return (\r\n        <section id=\"rssfeed\">\r\n          <div className=\"tradeFeed\">\r\n            Loading...\r\n          </div>\r\n        </section>\r\n      );\r\n    } \r\n    else {\r\n\r\n      return (\r\n         <section id=\"rssfeed\">\r\n          <h2 >{tradefeed.feed.url.split('/')[tradefeed.feed.url.split('/').length-1].split('_')[0]}-{tradefeed.feed.title}</h2>\r\n            <div className=\"table-wrapper\">  \r\n                     {/* <div><pre>{JSON.stringify(tradefeed, null, 2) }</pre></div> */}\r\n                  <div id=\"rssfeed\" >\r\n                    <table>\r\n                     <tr>\r\n                        {\r\n                          headers.map(header => <th>{header}</th>)\r\n                        }\r\n                      </tr>\r\n                        {tradefeed.items.map(\r\n                          item => \r\n                          <tr>\r\n                            {/* <tr>\r\n                              <b>{item.title}</b>\r\n                            </tr>\r\n                            <tr>\r\n                              {item.pubDate}\r\n                            </tr> */}\r\n                            {/* <tr className=\"tradeTableRow\"> */}\r\n                              {item.description.split(',').map( element => <td>{element.replace(/['\"]+/g, '')}</td>)}\r\n                            {/* </tr> */}\r\n                            <br/>\r\n                          </tr>)\r\n                        }\r\n                    </table>\r\n                  </div>\r\n              </div>\r\n      </section>\r\n      );\r\n   }\r\n   }\r\n}\r\n\r\nexport default RSSFeed;\r\n","import React, { Component } from 'react';\r\n// import RSSFeed from './Components/rssFeed';\r\nimport RSSFeed from './rssFeed';\r\n\r\nclass Feeds extends Component {\r\n    \r\n    render()\r\n    {\r\n        if(this.props.data){\r\n            var feeds= this.props.data.map(function(feed){\r\n                return <RSSFeed url={feed.url}/>\r\n                })\r\n        }\r\n\r\n        return(\r\n            <div className=\"TradeFeed\">\r\n                {feeds}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feeds;","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { Component } from 'react';\r\n// import RSSFeed from './Components/rssFeed';\r\nimport Feeds from './Components/feedbuilder';\r\nimport $ from 'jquery';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      config: {}\r\n    };\r\n\r\n  }\r\n\r\n  getConfig(){\r\n    $.ajax({\r\n      url:'config.json',\r\n      dataType:'json',\r\n      cache: false,\r\n      success: function(data){\r\n        this.setState({config: data});\r\n      }.bind(this),\r\n      error: function(xhr, status, err){\r\n        console.log(err);\r\n        alert(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getConfig();\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Main\">\r\n          <h1>Real Time DTCC Trade Feeds</h1>\r\n        </div>\r\n          <Feeds data={this.state.config.rssfeeds}/>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}