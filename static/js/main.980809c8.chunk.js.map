{"version":3,"sources":["Components/rssFeed.js","App.js","reportWebVitals.js","index.js"],"names":["headers","RSSFeed","props","fetchTradeFeed","a","fetch","parseUrl","then","res","json","result","setState","isLoaded","tradefeed","error","state","this","id","className","message","map","header","items","item","description","split","element","replace","Component","App","appData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGMA,EAAU,CAAC,KAAK,KAAK,OAAO,UAAU,SAAS,OAAO,YAAY,YAAY,QAAQ,MAAM,YAAY,QAAQ,kBAAkB,QAAQ,QAAQ,kBAAkB,UAAU,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,YAAY,QAAQ,QAAQ,QAAQ,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,cAAc,cAAc,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,UAAU,UAAU,YAAY,YAAY,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,iBAAiB,gBAAgB,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAwG3rBC,E,kDA/FZ,WAAYC,GAAQ,IAAD,8BAChB,cAAMA,IAQRC,eATkB,sBASD,sBAAAC,EAAA,sDACfC,MAAMC,wHACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZC,UAAU,EACVC,UAAWH,OAIf,SAACI,GACC,EAAKH,SAAS,CACZC,UAAU,EACVE,aAdS,2CAPf,EAAKC,MAAQ,CACVD,MAAO,KACPF,UAAU,EACVC,UAAW,IALE,E,qDA6BnB,WAEGG,KAAKb,mB,oBAIT,WAAU,IAAD,EAEgCa,KAAKD,MAApCD,EAFD,EAECA,MAAOF,EAFR,EAEQA,SAAUC,EAFlB,EAEkBA,UAEzB,OAAIC,EAEA,yBAASG,GAAG,UAAZ,SACE,sBAAKC,UAAU,YAAf,oBACUJ,EAAMK,aAKZP,EAYL,yBAASK,GAAG,UAAZ,SACG,sBAAKC,UAAU,YAAf,UACS,oBAAIA,UAAU,eAAd,wBAEA,qBAAKD,GAAG,UAAR,SACA,wBAAOC,UAAU,aAAjB,UACA,6BAEKlB,EAAQoB,KAAI,SAAAC,GAAM,OAAI,oBAAIH,UAAU,iBAAd,SAAgCG,SAGvDR,EAAUS,MAAMF,KACf,SAAAG,GAAI,OACJ,+BAQKA,EAAKC,YAAYC,MAAM,KAAKL,KAAK,SAAAM,GAAO,OAAI,oBAAIR,UAAU,gBAAd,SAA+BQ,EAAQC,QAAQ,SAAU,SAExG,uCAjCpB,yBAASV,GAAG,UAAZ,SACE,qBAAKC,UAAU,YAAf,8B,GArDYU,aCePC,E,kDAlBb,WAAY3B,GAAO,IAAD,8BAChB,cAAMA,IACDa,MAAQ,CACXe,QAAS,IAHK,E,0CASpB,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,U,GAdYU,aCOHG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.980809c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './rssFeed.css'\r\n\r\nconst headers = ['ID','ID','Type','Prodcut','Action','Type','IDontKnow','IDontKnow','Empty','BDC','StartDate','Empty','ExectionDateUTC','Empty','Empty','ExectionDateGMT','EndDate','Empty','Rate','Empty','Empty','Empty','Tenor','Empty','IDontKnow','Empty','Empty','Empty','PayIndex','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','PayCurrency','RecCurrency','Empty','Empty','Empty','Empty','Empty','Empty','Empty','Empty','PayFreq','RecFreq','IDontKnow','IDontKnow','Empty','Empty','Empty','Empty','Empty','Empty','PaySetttleCurr','RecSettleCurr','Empty','Empty','Empty','Empty','Empty','Empty','RecIndex','Empty','Empty','Empty','Empty','Empty','Empty','SEF']\r\nconst parseUrl = 'https://api.rss2json.com/v1/api.json?rss_url=';\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/cftc/rss/CFTC_RSS_RATES.rss';\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/ca/rss/CA_RSS_RATES.rss';\r\nconst rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/cftc/rss/CFTC_RSS_RATES.rss';\r\n\r\n \r\nclass RSSFeed extends Component {\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         error: null,\r\n         isLoaded: false,\r\n         tradefeed: {}\r\n       };\r\n    }\r\n\r\n    fetchTradeFeed = async() => { \r\n      fetch(parseUrl + rssUrl)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            tradefeed: result\r\n          });\r\n        },\r\n        // error handler\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n   }\r\n\r\n   componentDidMount() \r\n   {\r\n      this.fetchTradeFeed();\r\n   }\r\n\r\n\r\n  render() {\r\n\r\n    const { error, isLoaded, tradefeed } = this.state;\r\n\r\n    if (error) {\r\n      return (\r\n        <section id=\"rssfeed\">\r\n          <div className=\"tradeFeed\">\r\n            Error: {error.message}\r\n          </div>\r\n        </section>\r\n      );\r\n    } \r\n    else if (!isLoaded) {\r\n      return (\r\n        <section id=\"rssfeed\">\r\n          <div className=\"tradeFeed\">\r\n            Loading...\r\n          </div>\r\n        </section>\r\n      );\r\n    } \r\n    else {\r\n\r\n      return (\r\n         <section id=\"rssfeed\">\r\n            <div className=\"tradeFeed\">\r\n                     <h2 className=\"widget-title\">Trade Feed</h2>\r\n                     {/* <div><pre>{JSON.stringify(tradefeed, null, 2) }</pre></div> */}\r\n                     <div id=\"rssfeed\">\r\n                     <table className=\"tradeTable\">\r\n                     <tr>\r\n                        {\r\n                          headers.map(header => <th className=\"tradeTableHead\">{header}</th>)\r\n                        }\r\n                      </tr>\r\n                        {tradefeed.items.map(\r\n                          item => \r\n                          <tr>\r\n                            {/* <tr>\r\n                              <b>{item.title}</b>\r\n                            </tr>\r\n                            <tr>\r\n                              {item.pubDate}\r\n                            </tr> */}\r\n                            {/* <tr className=\"tradeTableRow\"> */}\r\n                              {item.description.split(',').map( element => <td className=\"tradeTableCol\">{element.replace(/['\"]+/g, '')}</td>)}\r\n                            {/* </tr> */}\r\n                            <br/>\r\n                          </tr>)\r\n                        }\r\n                      </table>\r\n                  </div>\r\n         </div>\r\n      </section>\r\n      );\r\n   }\r\n   }\r\n}\r\n\r\nexport default RSSFeed;\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport RSSFeed from './Components/rssFeed';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      appData: {}\n    };\n\n  }\n\n\nrender() {\n  return (\n    <div className=\"App\">\n      <RSSFeed/>\n    </div>\n  );\n}\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}