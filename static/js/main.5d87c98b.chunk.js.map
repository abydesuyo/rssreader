{"version":3,"sources":["Components/rssFeed.js","Components/feedbuilder.js","App.js","reportWebVitals.js","index.js"],"names":["headers","RSSFeed","props","fetchTradeFeed","a","fetch","url","then","res","json","data","setState","isLoaded","tradefeed","console","log","error","state","this","id","className","message","feed","split","length","title","map","header","items","item","description","element","replace","Component","Feeds","feeds","App","config","timeout","handleChange","bind","handleSubmit","$","ajax","dataType","cache","success","xhr","status","err","alert","getConfig","event","target","value","preventDefault","type","onChange","rssfeeds","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d87c98b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './rssFeed.css'\r\n\r\nconst headers = ['ID','ID','Type','Product','Action','Type','IDontKnow','IDontKnow','Empty','DCF','StartDate','Empty','ExecutionDateUTC','Empty','Empty','ExecutionDateGMT','EndDate','Empty','Rate','Empty','Empty','Empty','Tenor','Empty','Empty','Empty','Empty','Empty','PayIndex','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','IDontKnow','PayCurrency','RecCurrency','Empty','Empty','Empty','Empty','Empty','Empty','Empty','Empty','PayFreq','RecFreq','IDontKnow','IDontKnow','Empty','Empty','Empty','Empty','Empty','Empty','Empty','PaySettleCurr','RecSettleCurr','Empty','Empty','Empty','Empty','Empty','Empty','RecIndex','Empty','Empty','Empty','Empty','Empty','Empty','SEF']\r\nconst parseUrl = 'https://api.rss2json.com/v1/api.json?rss_url=';\r\n// const htmlparser2 = require(\"htmlparser2\");\r\n// const corsURL = 'https://cors-anywhere.herokuapp.com/';\r\n// const fetch = require(\"node-fetch\");\r\n// const RSS_URL = `https://kgc0418-tdw-data-0.s3.amazonaws.com/cftc/rss/CFTC_RSS_RATES.rss`;\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/cftc/rss/CFTC_RSS_RATES.rss';\r\n// const rssUrl = 'https://kgc0418-tdw-data-0.s3.amazonaws.com/ca/rss/CA_RSS_RATES.rss';\r\n\r\n// var Feed = require('rss-to-json');\r\n// Feed.load('https://morioh.com/feed').then(rss => {\r\n//     console.log(JSON.stringify(rss, null, 3));\r\n// });\r\n \r\n\r\nclass RSSFeed extends Component {\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         error: null,\r\n         isLoaded: false,\r\n         tradefeed: {}\r\n       };\r\n    }\r\n\r\n    fetchTradeFeed = async() => { \r\n      fetch(parseUrl + this.props.url)\r\n      // fetch(corsURL + this.props.url\r\n      // , {\r\n      //   crossDomain:true,\r\n      //   method: 'POST',\r\n        // headers: {'Content-Type':'application/json','Access-Control-Allow-Origin':'*'},\r\n      //   // mode: 'cors',\r\n      //   // Accept: 'text/html',\r\n      //   // Cookie: 'Version=1',\r\n      //   // headers: {\r\n      //   //   'Access-Control-Allow-Origin':'http://localhost:3000/',\r\n        // }\r\n      // })\r\n      // fetch(RSS_URL)\r\n      // .then(response => response.text())\r\n      .then(res => res.json())\r\n      // .then(content => new htmlparser2.parseFeed(content))\r\n      // Feed.load(this.props.url)\r\n      // .then(rss => {JSON.stringify(rss, null, 3);})\r\n      .then(\r\n        (data) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            tradefeed: data\r\n          });\r\n          console.log(data);\r\n        },\r\n        // error handler\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n   }\r\n\r\n   componentDidMount() \r\n   {\r\n      this.fetchTradeFeed();\r\n   }\r\n\r\n  //  componentDidMount() {\r\n  //   this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\r\n  // }\r\n  // componentWillUnmount() {\r\n  //   clearInterval(this.interval);\r\n  // }\r\n\r\n  render() {\r\n\r\n    const { error, isLoaded, tradefeed } = this.state;\r\n\r\n    if (error) {\r\n      return (\r\n        <section id=\"rssfeed\">\r\n          <div className=\"tradeFeed\">\r\n            Error: {error.message}\r\n          </div>\r\n        </section>\r\n      );\r\n    } \r\n    else if (!isLoaded) {\r\n      return (\r\n        <section id=\"rssfeed\">\r\n          <div className=\"tradeFeed\">\r\n            Loading...\r\n          </div>\r\n        </section>\r\n      );\r\n    } \r\n    else {\r\n\r\n      return (\r\n         <section id=\"rssfeed\">\r\n          <h2 >{tradefeed.feed.url.split('/')[tradefeed.feed.url.split('/').length-1].split('_')[0]}-{tradefeed.feed.title}</h2>\r\n          {/* <h2> {this.props.url.split('/')[this.props.url.split('/').length-1].split('_')[0]} - {tradefeed.title} </h2> */}\r\n            <div className=\"table-wrapper\">  \r\n                     {/* <div><pre>{JSON.stringify(tradefeed, null, 2) }</pre></div> */}\r\n                  <div id=\"rssfeed\" >\r\n                    <table>\r\n                     <tr>\r\n                        {\r\n                          headers.map(header => <th>{header}</th>)\r\n                        }\r\n                      </tr>\r\n                        {tradefeed.items.map(\r\n                          item => \r\n                          <tr>\r\n                            {/* <tr>\r\n                              <b>{item.title}</b>\r\n                            </tr>\r\n                            <tr>\r\n                              {item.pubDate}\r\n                            </tr> */}\r\n                            {/* <tr className=\"tradeTableRow\"> */}\r\n                              {item.description.split(',').map( element => <td>{element.replace(/['\"]+/g, '')}</td>)}\r\n                            {/* </tr> */}\r\n                            <br/>\r\n                          </tr>)\r\n                        }\r\n                    </table>\r\n                  </div>\r\n              </div>\r\n      </section>\r\n      );\r\n   }\r\n   }\r\n}\r\n\r\nexport default RSSFeed;\r\n","import React, { Component } from 'react';\r\n// import RSSFeed from './Components/rssFeed';\r\nimport RSSFeed from './rssFeed';\r\n\r\nclass Feeds extends Component {\r\n    \r\n    render()\r\n    {\r\n        if(this.props.data){\r\n            var feeds= this.props.data.map(function(feed){\r\n                return <RSSFeed url={feed.url}/>\r\n                })\r\n        }\r\n\r\n        return(\r\n            <div className=\"TradeFeed\">\r\n                {feeds}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feeds;","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { Component } from 'react';\r\n// import RSSFeed from './Components/rssFeed';\r\nimport Feeds from './Components/feedbuilder';\r\nimport $ from 'jquery';\r\n\r\n// function reloadData(){\r\n//   window.location.reload(false);\r\n// }\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      config: {},\r\n      timeout:20\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n  getConfig(){\r\n    $.ajax({\r\n      url:'config.json',\r\n      dataType:'json',\r\n      cache: false,\r\n      success: function(data){\r\n        this.setState({config: data});\r\n      }.bind(this),\r\n      error: function(xhr, status, err){\r\n        console.log(err);\r\n        alert(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getConfig();\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({timeout: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert(`Your Current Refresh Rate is : ${this.state.timeout} seconds`);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Main\">\r\n          <h1>Real Time DTCC Trade Feeds</h1>\r\n          <div>\r\n            {/* <button onClick={window.location.reload(false)}>Reload Feeds</button> */}\r\n            {/* <span className=\"options\"> */}\r\n            <form id=\"reloadPage\">\r\n            <input type=\"submit\" value=\"Refresh\" />\r\n            <select value={this.state.value} onChange={this.handleChange}>\r\n              <option value=\"5\">15</option>\r\n              <option value=\"10\">25</option>\r\n              <option value=\"20\">50</option>\r\n            </select>\r\n            </form>\r\n            {/* </span> */}\r\n          </div>\r\n          </div>\r\n            <Feeds data={this.state.config.rssfeeds}/>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}